from .typings import Awaitable
from .app import Application
from .request import Request

from typing import (
    List,
    Mapping,
    Optional
)

class Route:
    path: str
    method: str
    callback: Awaitable
    def __init__(self, path: str, method: str, callback: Awaitable, *, app: Application) -> None: ...
    @property
    def params(self) -> Optional[Mapping[str, str]]: ...
    @property
    def middlewares(self) -> List['Middleware']: ...
    def clear_middlewares(self): ...
    def add_middleware(self, callback: Awaitable): ...
    def middleware(self, callback: Awaitable): ...
    def destroy(self): ...
    def __repr__(self) -> str: ...
    async def __call__(self, request: Request, *args): ...

class Listener:
    event: str
    callback: Awaitable
    def __init__(self, callback: Awaitable, name: str = None) -> None: ...
    async def __call__(self, *args): ...

class Middleware:
    callback: Awaitable
    def __init__(self, callback: Awaitable, route: Route) -> None: ...
    @property
    def route(self) -> Route: ...
    async def __call__(self, route: Route, request: Request, *args): ...