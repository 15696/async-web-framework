from typing import (
    Union,
    List,
    Tuple,
    Type,
    Any,
    Mapping,
    Dict
)

from .sockets import socket, Address
from .enums import (
    WebSocketOpcode,
    WebSocketCloseCode,
    WebSocketState
)
from .frame import WebSocketFrame, Data

class Websocket(socket):
    state: WebSocketState

    async def connect(self, host: str, path: str, port: int, *, do_handshake_on_connect: bool=...): ...
    async def wait_for_handshake_completion(self, timeout: int=...): ...
    async def handshake(self) -> bytes: ...
    async def accept(self, timeout: int=..., *, do_handshake_on_connect: bool=...) -> Tuple['Websocket', Address]: ...
    async def send_frame(self, frame: WebSocketFrame) -> None: ...
    async def send_bytes(self, data: bytes=..., opcode: WebSocketOpcode=...) -> None: ...
    async def send_binary(self, data: bytes=...) -> None: ...
    async def send_str(self, data: str=..., opcode: WebSocketOpcode=...) -> None: ...
    async def send_json(self, data: Mapping[str, Any]=..., opcode: WebSocketOpcode=...) -> None: ...
    async def receive(self) -> Tuple[Data, WebSocketOpcode]: ...
    async def receive_bytes(self)-> Tuple[bytes, WebSocketOpcode]: ...
    async def receive_str(self)-> Tuple[str, WebSocketOpcode]: ...
    async def receive_json(self)-> Tuple[Dict, WebSocketOpcode]: ...
    async def ping(self, data: bytes=...): ...
    async def pong(self, data: bytes=...): ...
    async def continuation(self, data: bytes=...):  ...
    async def close(self, *, code: WebSocketCloseCode=..., data: bytes=...): ...