import asyncio
from typing import Iterable

from .sockets import socket
from .protocols import Protocol

class BaseTransport:
    def __init__(self, protocol: Protocol, sock: socket, loop: asyncio.AbstractEventLoop) -> None: ...

    @property
    def protocol(self) -> Protocol: ...
    def is_closed(self) -> bool: ...
    def close(self) -> None: ...

class ReadTransport(BaseTransport):

    def is_reading(self) -> bool: ...
    def pause_reading(self) -> None: ...
    def resume_reading(self) -> None: ...

class WriteTransport(BaseTransport):

    def is_writing(self) -> bool: ...
    async def write(self, data: bytes) -> None: ...
    async def writelines(self, data: Iterable[bytes]) -> None: ...
    def pause_writing(self) -> None: ...
    def resume_writing(self) -> None: ...

class Transport(ReadTransport, WriteTransport):
    ...
