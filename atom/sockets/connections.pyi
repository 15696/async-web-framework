from .sockets import socket, Address
from .websockets import Websocket
from .enums import WebSocketCloseCode, WebSocketOpcode, WebSocketState
from .frame import Data

from typing import (
    IO,
    Tuple,
    Mapping,
    Any
)

class Connection:
    def __init__(self, __socket: socket) -> None: ...
    @property
    def peername(self) -> Address: ...
    @property
    def sockname(self) -> Address: ...
    @property
    def is_closed(self) -> bool: ...
    async def write(self, data: bytes) -> int: ...
    async def sendfile(self, file: IO[bytes], *, offset: int = ..., count: int = ...): ...
    async def recv(self) -> bytes: ...
    async def recvfrom(self) -> Tuple[bytes, Tuple[int, bytes]]: ...
    async def recv_into(self, buffer: bytearray=..., nbytes: int=...) -> int: ...
    async def recvfrom_into(self, buffer: bytearray=..., nbytes: int=...) -> Tuple[int, Tuple[int, bytes]]: ...
    def close(self) -> None: ...
    def shutdown(self) -> None: ...

class WebsocketConnection:
    state: WebSocketState
    def __init__(self, __socket: Websocket) -> None: ...
    @property
    def peername(self) -> Address: ...
    @property
    def sockname(self) -> Address: ...
    @property
    def is_closed(self) -> bool: ...
    async def write(self, data: bytes) -> int: ...
    async def handshake(self) -> None: ...
    async def ping(self, data: bytes=...) -> None: ...
    async def pong(self, data: bytes=...) -> None: ...
    async def binary(self, data: bytes=...) -> None: ...
    async def continuation(self, data: bytes=...) -> None: ...
    async def send_bytes(self, data: bytes=..., *, opcode: WebSocketOpcode=...) -> None: ...
    async def send_str(self, data: str=..., *, opcode: WebSocketOpcode=...) -> None: ...
    async def send_json(self, data: Mapping[str, Any]=..., *, opcode: WebSocketOpcode=...) -> None: ...
    async def receive(self) -> Tuple[Data, WebSocketOpcode]: ...
    async def receive_bytes(self) -> Tuple[bytes, WebSocketOpcode]: ...
    async def receive_str(self) -> Tuple[str, WebSocketOpcode]: ...
    async def receive_json(self) -> Tuple[Mapping[Any, Any], WebSocketOpcode]: ...
    async def close(self, data: bytes=..., code: WebSocketCloseCode=...) -> None: ...
    def shutdown(self) -> None: ...