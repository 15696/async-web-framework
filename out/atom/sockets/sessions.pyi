import asyncio
import typing
from . import Response
from atom import sockets
from atom.datastructures import URL
from typing import Any

async def request(url: typing.Union[str, URL], method: str, **kwargs: Any) -> Any: ...
async def connect(url: typing.Union[str, URL], **kwargs: Any) -> Any: ...

class SessionContextManager:
    def __init__(self, coro: typing.Coroutine[None, None, Response], close: typing.Callable[..., typing.Coroutine]) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args: Any): ...
    def __await__(self): ...

class WebsocketContextManager:
    def __init__(self, coro: typing.Coroutine[typing.Any, typing.Any, sockets.WebsocketConnection], close: typing.Callable[..., typing.Coroutine]) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args: Any): ...
    def __await__(self): ...

class Session:
    def __init__(self, *, loop: asyncio.AbstractEventLoop=...) -> None: ...
    def __del__(self) -> None: ...
    async def close(self) -> None: ...
    def request(self, url: typing.Union[str, URL], method: str=..., **kwargs: Any) -> Any: ...
    def ws_connect(self, url: typing.Union[str, URL], **kwargs: Any) -> Any: ...
