import asyncio

class LockMixin:
    def __init__(self, *, loop: asyncio.AbstractEventLoop=...): ...
    @property
    def loop(self) -> asyncio.AbstractEventLoop: ...
    async def acquire(self, *, wait: bool=...) -> bool: ...
    def release(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args): ...

class Semaphore(LockMixin):
    def __init__(self, value: int, *, loop: asyncio.AbstractEventLoop=...) -> None: ...
    @property
    def value(self) -> int: ...
    def is_locked(self) -> bool: ...
    def wakeup(self) -> None: ...
    async def wait(self) -> None: ...

class Lock:
    def __init__(self, *, loop: asyncio.AbstractEventLoop=...) -> None: ...
    @property
    def loop(self) -> asyncio.AbstractEventLoop: ...
    def is_locked(self) -> bool: ...
    async def wait(self) -> None: ...