import asyncio
from typing import Any, List, Optional, Union, AsyncIterator


class StreamWriter:
    def __init__(self, transport: asyncio.Transport) -> None: ...
    @property
    def transport(self) -> asyncio.Transport: ...
    async def write(self, data: Union[bytearray, bytes], *, timeout: float=...) -> None: ...
    async def writelines(self, data: List[Union[bytearray, bytes]], *, timeout: float=...) -> None: ...
    def resume_writing(self) -> None: ...
    def pause_writing(self) -> None: ...
    def get_extra_info(self, name: str, default: Any=...) -> Any: ...
    def close(self) -> None: ...

class StreamReader:
    buffer: bytearray = ...
    loop: asyncio.AbstractEventLoop = ...
    def __init__(self, loop: Optional[asyncio.AbstractEventLoop]=...) -> None: ...
    def feed_data(self, data: Union[bytearray, bytes]) -> None: ...
    def feed_eof(self) -> None: ...
    async def read(self, nbytes: Optional[int]=..., *, timeout: Optional[float]=...) -> bytes: ...
    async def readline(self, *, timeout: Optional[float]=..., wait: bool=...) -> Optional[bytes]: ...
    def readlines(self, size: int=..., *, timeout: float=...) -> AsyncIterator[bytes]: ...

class StreamTransport:
    def __init__(self, transport: asyncio.Transport, waiter: asyncio.Future[None]) -> None: ...
    def get_extra_info(self, name: str, default: Any=...) -> Any: ...
    def get_protocol(self) -> asyncio.Protocol: ...
    async def close(self) -> None: ...
    def abort(self) -> None: ...
    def is_closing(self) -> bool: ...
    def is_reading(self) -> bool: ...
    def feed_data(self, data: Union[bytes, bytearray]) -> None: ...
    def feed_eof(self) -> None: ...
    async def receive(self, nbytes: Optional[int]=..., *, timeout: Optional[float]=...) -> bytes: ...
    async def write(self, data: Union[bytearray, bytes], *, timeout: float=...) -> None: ...
    async def writelines(self, data: List[Union[bytearray, bytes]], *, timeout: float=...) -> None: ...
    def resume_writing(self) -> None: ...
    def pause_writing(self) -> None: ...
    
class StreamProtocol(asyncio.Protocol):
    def __init__(self, loop: asyncio.AbstractEventLoop) -> None: ...
    def __call__(self, *args: Any, **kwds: Any) -> Any: ...
    def connection_made(self, transport: asyncio.Transport) -> None: ...
    def connection_lost(self, exc: Optional[BaseException]) -> None: ...
    def data_received(self, data: bytes) -> None: ...
    def eof_received(self) -> None: ...
    def resume_writing(self) -> None: ...
    def pause_writing(self) -> None: ...

async def open_connection(host: str, port: int, **kwargs: Any) -> StreamTransport: ...