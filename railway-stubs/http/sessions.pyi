import asyncio
from .hooker import TCPHooker, Websocket
from .response import HTTPResponse
from .utils import AsyncContextManager
from railway import URL
from typing import Any, Optional, Union

class HTTPSession:
    loop: asyncio.AbstractEventLoop = ...
    def __init__(self, loop: Optional[asyncio.AbstractEventLoop]=...) -> None: ...
    async def __aenter__(self) -> 'HTTPSession': ...
    async def __aexit__(self, *exc: Any) -> Any: ...
    async def close(self) -> None: ...
    def request(self, method: str, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
    def ws_connect(self, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[Optional[Websocket]]: ...
    def get(self, url: Union[str, URL], **kwargs: Any)  -> AsyncContextManager[HTTPResponse]: ...
    def post(self, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
    def put(self, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
    def delete(self, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
    def head(self, url: Union[str, URL], **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
    async def redirect(self, hooker: TCPHooker, response: HTTPResponse, method: str) -> HTTPResponse: ...

def request(url: str, method: str, **kwargs: Any) -> AsyncContextManager[HTTPResponse]: ...
def ws_connect(url: str, **kwargs: Any) -> AsyncContextManager[Websocket]: ...
