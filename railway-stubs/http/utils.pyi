import asyncio
from .errors import InvalidHost as InvalidHost
from typing import Any, Coroutine, Optional, TypeVar

T = TypeVar('T')

class AsyncContextManager:
    coro: Coroutine[Any, Any, T] = ...
    def __init__(self, coroutine: Coroutine[Any, Any, T]) -> None: ...
    def __await__(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args: Any) -> Any: ...

class _AsyncIterator:
    coroutine: Coroutine[Any, Any, Any] = ...
    future: 'asyncio.Future' = ...
    index: int = ...
    def __init__(self, coroutine: Coroutine[Any, Any, Any]) -> None: ...
    def __await__(self): ...
    def __aiter__(self): ...
    results: Any = ...
    async def __anext__(self) -> T: ...

class AsyncIterator(_AsyncIterator[T]):
    host: Any = ...
    def __init__(self, coroutine: Coroutine[Any, Any, Any], host: Optional[str]) -> None: ...
    async def __anext__(self): ...
