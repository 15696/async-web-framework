import socket
from typing import Any, Optional, Tuple, Union

class ConnectionTimeout(TimeoutError): ...

class Address:
    family: socket.AddressFamily = ...
    type: Union[int, socket.SocketKind]= ...
    protocol: Any = ...
    canonname: Any = ...
    def __init__(self, addr: Tuple[socket.AddressFamily, int, int, str, Union[Tuple[str, int], Tuple[str, int, int, int]]]) -> None: ...
    def address(self) -> Union[Tuple[str, int], Tuple[str, int, int, int]]: ...

class HappyEyeballs:
    def __init__(self) -> None: ...
    def connect(self, host: str, port: int, *, socket_type: Optional[socket.SocketKind]=...) -> socket.socket: ...
    def send(self, data: bytes) -> None: ...
    def recv(self, size: int) -> bytes: ...
    def close(self) -> None: ...

class AsyncHappyEyeballs(HappyEyeballs):
    def __init__(self) -> None: ...
    async def connect(self, host: str, port: int, *, socket_type: Optional[socket.SocketKind]=...) -> socket.socket: ...
    async def send(self, data: bytes) -> None: ...
    async def recv(self, size: int) -> bytes: ...
