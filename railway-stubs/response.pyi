import enum
from .file import File
from .cookies import CookieJar
from typing import Any, Dict, List, Optional, Union

class HTTPStatus(enum.IntEnum):
    def __new__(cls: Any, value: int, description: str) -> Any: ...
    @property
    def status(self) -> int: ...
    @property
    def description(self) -> str: ...
    CONTINUE: Any = ...
    SWITCHING_PROTOCOLS: Any = ...
    PROCESSING: Any = ...
    EARLY_HINTS: Any = ...
    OK: Any = ...
    CREATED: Any = ...
    ACCEPTED: Any = ...
    NON_AUTHORITATIVE_INFORMATION: Any = ...
    NO_CONTENT: Any = ...
    RESET_CONTENT: Any = ...
    PARTIAL_CONTENT: Any = ...
    MULTI_STATUS: Any = ...
    ALREADY_REPORTED: Any = ...
    IM_USED: Any = ...
    MULTIPLE_CHOICES: Any = ...
    MOVED_PERMANENTLY: Any = ...
    FOUND: Any = ...
    SEE_OTHER: Any = ...
    NOT_MODIFIED: Any = ...
    USE_PROXY: Any = ...
    TEMPORARY_REDIRECT: Any = ...
    PERMANENT_REDIRECT: Any = ...
    BAD_REQUEST: Any = ...
    UNAUTHORIZED: Any = ...
    PAYMENT_REQUIRED: Any = ...
    FORBIDDEN: Any = ...
    NOT_FOUND: Any = ...
    METHOD_NOT_ALLOWED: Any = ...
    NOT_ACCEPTABLE: Any = ...
    PROXY_AUTHENTICATION_REQUIRED: Any = ...
    REQUEST_TIMEOUT: Any = ...
    CONFLICT: Any = ...
    GONE: Any = ...
    LENGTH_REQUIRED: Any = ...
    PRECONDITION_FAILED: Any = ...
    REQUEST_ENTITY_TOO_LARGE: Any = ...
    REQUEST_URI_TOO_LONG: Any = ...
    UNSUPPORTED_MEDIA_TYPE: Any = ...
    REQUESTED_RANGE_NOT_SATISFIABLE: Any = ...
    EXPECTATION_FAILED: Any = ...
    IM_A_TEAPOT: Any = ...
    MISDIRECTED_REQUEST: Any = ...
    UNPROCESSABLE_ENTITY: Any = ...
    LOCKED: Any = ...
    FAILED_DEPENDENCY: Any = ...
    TOO_EARLY: Any = ...
    UPGRADE_REQUIRED: Any = ...
    PRECONDITION_REQUIRED: Any = ...
    TOO_MANY_REQUESTS: Any = ...
    REQUEST_HEADER_FIELDS_TOO_LARGE: Any = ...
    UNAVAILABLE_FOR_LEGAL_REASONS: Any = ...
    INTERNAL_SERVER_ERROR: Any = ...
    NOT_IMPLEMENTED: Any = ...
    BAD_GATEWAY: Any = ...
    SERVICE_UNAVAILABLE: Any = ...
    GATEWAY_TIMEOUT: Any = ...
    HTTP_VERSION_NOT_SUPPORTED: Any = ...
    VARIANT_ALSO_NEGOTIATES: Any = ...
    INSUFFICIENT_STORAGE: Any = ...
    LOOP_DETECTED: Any = ...
    NOT_EXTENDED: Any = ...
    NETWORK_AUTHENTICATION_REQUIRED: Any = ...

class Response:
    version: str = ...
    cookies: CookieJar = ...
    def __init__(self, body: Optional[str]=..., status: Optional[int]=..., content_type: Optional[str]=..., headers: Optional[Dict[str, Any]]=..., version: Optional[str]=...) -> None: ...
    @property
    def body(self) -> Any: ...
    @body.setter
    def body(self, value: Any) -> None: ...
    @property
    def status(self) -> HTTPStatus: ...
    @property
    def content_type(self) -> str: ...
    @property
    def headers(self) -> Dict[str, Any]: ...
    def add_body(self, data: str) -> None: ...
    def add_header(self, key: str, value: str) -> Any: ...
    def add_cookie(self, name: str, value: str, *, domain: Optional[str]=..., http_only: bool=..., is_secure: bool=...) -> Any: ...
    def encode(self) -> bytes: ...

class HTMLResponse(Response):
    def __init__(self, body: Optional[str]=..., status: Optional[int]=..., headers: Optional[Dict[str, Any]]=..., version: Optional[str]=...) -> None: ...

class JSONResponse(Response):
    def __init__(self, body: Optional[Union[Dict[str, Any], List[Any]]]=..., status: Optional[int]=..., headers: Optional[Dict[str, Any]]=..., version: Optional[str]=...) -> None: ...

class FileResponse(Response):
    file: File = ...
    def __init__(self, file: File, status: Optional[int]=..., headers: Optional[Dict[str, str]]=..., version: Optional[str]=...) -> None: ...
    def get_content_type(self) -> str: ...
    async def read(self) -> bytes: ...
