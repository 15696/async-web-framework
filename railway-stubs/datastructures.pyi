from typing import Any, Dict, List, Optional, Tuple, TypeVar, Union, TypedDict

KT = TypeVar('KT')
VT = TypeVar('VT')

class URLDict(TypedDict):
    scheme: str
    netloc: str
    host: str
    port: int
    path: str
    params: str
    query: ImmutableMapping[str, str]
    fragment: str
    username: Optional[str]
    password: Optional[str]

class ImmutableMapping(Dict[KT, VT]):
    def setdefault(self, key: Any, default: Any=...) -> Any: ...
    def update(self, **kwargs: VT) -> None: ...
    def pop(self, key: Any, default: Any=...) -> Any: ...
    def popitem(self) -> Tuple[KT, VT]: ...
    def clear(self) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def copy(self): ...
    def __copy__(self): ...

class MultiDict(Dict[KT, VT]):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, key: KT) -> VT: ...
    def __setitem__(self, key: KT, value: VT) -> None: ...
    def __delitem__(self, key: KT) -> None: ...
    def clear(self) -> None: ...
    def get(self, key: KT, default: Any=None) -> Optional[VT]: ...
    def getall(self, key: KT) -> List[VT]: ...

class Headers(MultiDict[str, str]): ...

class URL:
    value: str = ...
    components: Any = ...
    def __init__(self, url: Union[str, bytes]) -> None: ...
    def __add__(self, other: Union[str, URL, Any]) -> URL: ...
    @property
    def scheme(self) -> str: ...
    @property
    def netloc(self) -> str: ...
    @property
    def path(self) -> str: ...
    @property
    def hostname(self) -> Optional[str]: ...
    @property
    def query(self) -> ImmutableMapping[str, str]: ...
    @property
    def fragment(self) -> Optional[str]: ...
    @property
    def username(self) -> Optional[str]: ...
    @property
    def password(self) -> Optional[str]: ...
    @property
    def port(self) -> Optional[int]: ...
    def replace(
        self, 
        *, 
        scheme: str=..., 
        netloc: str=..., 
        path: str=..., 
        hostname: str=..., 
        port: int=...,
        query: str=...,
        fragement: str=...,
        username: str=...,
        password: str=...
    ) -> URL:
        ...
    def as_dict(self) -> URLDict: ...