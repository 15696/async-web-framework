from .request import Request
from typing import Any, List, Optional

class RatelimitExceeded(Exception):
    retry_after: float = ...
    key: 'Key' = ...
    bucket: 'Bucket' = ...
    def __init__(self, retry_after: float, key: Key) -> None: ...

class Key:
    bucket: 'Bucket' = ...
    def __init__(self, bucket: Bucket) -> None: ...
    def update(self, current: Optional[float]=...) -> Any: ...
    @property
    def rate(self) -> int: ...
    @property
    def per(self) -> float: ...
    def get_remaining(self, current: float) -> int: ...

class Bucket:
    rate: Any = ...
    per: Any = ...
    path: Any = ...
    def __init__(self, rate: int, per: float, path: Optional[str]) -> None: ...
    @property
    def keys(self) -> List[Key]: ...
    def add_key(self, value: Any) -> Key: ...
    def get_key(self, value: Any) -> Optional[Key]: ...
    def update_ratelimit(self, request: Request, value: Any) -> None: ...

class RatelimiteHandler:
    def __init__(self, global_rate: Optional[int]=..., global_per: Optional[float]=...) -> None: ...
    def add_bucket(self, path: str, rate: int, per: float) -> Bucket: ...
    def get_bucket(self, path: str) -> Optional[Bucket]: ...
    def get_global_bucket(self) -> Optional[Bucket]: ...
