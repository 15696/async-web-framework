from ._types import CoroFunc, Func, MaybeCoroFunc, Coro
from .router import Router
from .request import Request
from .responses import HTTPException
from typing import Any, Callable, List, Optional, Union

class Object:
    callback: MaybeCoroFunc
    def __init__(self, callback: MaybeCoroFunc) -> None: ...
    async def __call__(self, *args: Any, **kwds: Any) -> Any: ...

class PartialRoute:
    path: str = ...
    method: str = ...
    def __init__(self, path: str, method: str) -> None: ...

class Route(Object):
    path: str = ...
    method: str = ...
    callback: CoroFunc = ...
    def __init__(self, path: str, method: str, callback: MaybeCoroFunc, router: Optional[Router]) -> None: ...
    @property
    def middlewares(self) -> List[Middleware]: ...
    @property
    def router(self) -> Router: ...
    def add_status_code_handler(self, status: int, callback: Callable[[Request, HTTPException, Route], Coro]) -> Callable[[Request, HTTPException, Route], Coro]: ...
    def remove_status_code_handler(self, status: int) -> Callable[[Request, HTTPException, Route], Coro]: ...
    def status_code_handler(self, status: int) -> Callable[[Callable[[Request, HTTPException, Route], Coro]], Callable[[Request, HTTPException, Route], Coro]]: ... 
    def on_error(self, callback: Callable[[Request, Exception, Route], Coro]) -> Callable[[Request, HTTPException, Route], Coro]: ...
    def cleanup_middlewares(self) -> None: ...
    def add_middleware(self, callback: CoroFunc) -> Middleware: ...
    def remove_middleware(self, middleware: Middleware) -> Middleware: ...
    def middleware(self, callback: CoroFunc) -> Middleware: ...
    def after_request(self, callback: Union[CoroFunc, Func]) -> Union[CoroFunc, Func]: ...
    def destroy(self): ...

class Middleware(Object):
    callback: CoroFunc = ...
    def __init__(self, callback: CoroFunc, route: Optional[Route]=..., router: Optional[Router]=...) -> None: ...
    @property
    def router(self) -> Optional[Router]: ...
    @router.setter
    def router(self, value: Any) -> None: ...
    @property
    def route(self) -> Optional[Route]: ...
    @route.setter
    def route(self, value: Any) -> None: ...
    def route(self) -> None: ...
    def is_global(self) -> bool: ...
    def is_route_specific(self) -> bool: ...
    def detach(self): ...
    def attach(self, route: Route) -> Any: ...

class WebsocketRoute(Route): ...

class Listener(Object):
    event: str = ...
    callback: CoroFunc = ...
    def __init__(self, callback: CoroFunc, name: str) -> None: ...

def route(path: str, method: str) -> Callable[[CoroFunc], Route]: ...
def websocket_route(path: str) -> Callable[[CoroFunc], WebsocketRoute]: ...
def listener(event: str=...) -> Callable[[CoroFunc], Listener]: ...
def middleware(callback: CoroFunc) -> Middleware: ...
