import asyncio
from .app import Application
from .request import Request
from .response import Response
from .server import ClientConnection, TCPServer
from .websockets import ServerWebsocket as Websocket
from ._types import peer
import socket as _socket
from typing import Any, Dict, Optional

GUID: str

class Worker:
    app: Application = ...
    id: int = ...
    websockets: Dict[peer, Websocket] = ...
    server: TCPServer = ...
    socket: _socket.socket = ...
    def __init__(self, app: Application, id: int) -> None: ...
    @property
    def port(self) -> int: ...
    @property
    def host(self) -> str: ...
    @property
    def loop(self) -> Optional[asyncio.AbstractEventLoop]: ...
    def is_working(self) -> bool: ...
    def is_serving(self) -> bool: ...
    async def start(self) -> None: ...
    async def run(self) -> None: ...
    async def stop(self) -> None: ...
    async def close(self) -> None: ...
    def get_websocket(self, connection: ClientConnection) -> Optional[Websocket]: ...
    def store_websocket(self, ws: Websocket, connection: ClientConnection) -> None: ...
    def feed_into_websocket(self, data: bytes, connection: ClientConnection) -> Optional[bytes]: ...
    def ensure_websockets(self) -> None: ...
    def is_websocket_request(self, request: Request) -> bool: ...
    def parse_websocket_key(self, request: Request) -> str: ...
    async def handshake(self, request: Request, connection: ClientConnection) -> None: ...
    async def write(self, data: Response, connection: ClientConnection) -> Any: ...
    async def handler(self, connection: ClientConnection) -> None: ...
