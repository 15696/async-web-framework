from .response import Response
from typing import Any, Dict, Optional, TypeVar, Type

T = TypeVar('T')

class HTTPResponse(Response):
    def __init__(self, body: Any=..., content_type: Optional[str]=..., headers: Optional[Dict[str, Any]]=...) -> None: ...

class HTTPException(HTTPResponse, Exception):
    def __init__(self, reason: Optional[str]=..., content_type: Optional[str]=..., headers: Optional[Dict[str, Any]]=...) -> None: ...

class Continue(HTTPResponse): ...
class SwitchingProtocols(HTTPResponse): ...
class Processing(HTTPResponse): ...
class EarlyHints(HTTPResponse): ...
class OK(HTTPResponse): ...
class Created(HTTPResponse): ...
class Accepted(HTTPResponse): ...
class NonAuthoritativeInformation(HTTPResponse): ...
class NoContent(HTTPResponse): ...
class ResetContent(HTTPResponse): ...
class PartialContent(HTTPResponse): ...
class MultiStatus(HTTPResponse): ...
class AlreadyReported(HTTPResponse): ...
class IMUsed(HTTPResponse): ...

class Redirection(HTTPResponse):
    def __init__(self, location: str, body: Any=..., content_type: Optional[str]=..., headers: Optional[Dict[str, Any]]=...) -> None: ...

class MultipleChoice(Redirection): ...
class MovedPermanently(Redirection): ...
class Found(Redirection): ...
class SeeOther(Redirection): ...
class NotModified(Redirection): ...
class TemporaryRedirect(Redirection): ...
class PermanentRedirect(Redirection): ...
class BadRequest(HTTPException): ...
class Unauthorized(HTTPException): ...
class PaymentRequired(HTTPException): ...
class Forbidden(HTTPException): ...
class NotFound(HTTPException): ...
class MethodNotAllowed(HTTPException): ...
class NotAcceptable(HTTPException): ...
class ProxyAuthenticationRequired(HTTPException): ...
class RequestTimeout(HTTPException): ...
class Conflict(HTTPException): ...
class Gone(HTTPException): ...
class LengthRequired(HTTPException): ...
class PreconditionFailed(HTTPException): ...
class PayloadTooLarge(HTTPException): ...
class URITooLong(HTTPException): ...
class UnsupportedMediaType(HTTPException): ...
class RangeNotSatisfiable(HTTPException): ...
class ExpectationFailed(HTTPException): ...
class ImATeapot(HTTPException): ...
class MisdirectedRequest(HTTPException): ...
class UnprocessableEntity(HTTPException): ...
class Locked(HTTPException): ...
class FailedDependency(HTTPException): ...
class TooEarly(HTTPException): ...
class UpgradeRequired(HTTPException): ...
class PreconditionRequired(HTTPException): ...
class TooManyRequests(HTTPException): ...
class RequestHeaderFieldsTooLarge(HTTPException): ...
class UnavailableForLegalReasons(HTTPException): ...
class InternalServerError(HTTPException): ...
class NotImplemented(HTTPException): ...
class BadGateway(HTTPException): ...
class ServiceUnavailable(HTTPException): ...
class GatewayTimeout(HTTPException): ...
class HTTPVersionNotSupported(HTTPException): ...
class VariantAlsoNegotiates(HTTPException): ...
class InsufficientStorage(HTTPException): ...
class LoopDetected(HTTPException): ...
class NotExtended(HTTPException): ...
class NetworkAuthenticationRequired(HTTPException): ...

def abort(_status: int, *, message: Optional[str]=..., content_type: str=...) -> Any: ...

informational_responses: Dict[int, Type[HTTPResponse]]
successful_responses: Dict[int, Type[HTTPResponse]]
redirects: Dict[int, Type[Redirection]]
client_errors: Dict[int, Type[HTTPException]]
server_errors: Dict[int, Type[HTTPException]]
