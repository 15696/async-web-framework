from ._types import CoroFunc
from .objects import Route, WebsocketRoute
from typing import Any, Callable, List, Optional, Union

class Router:
    url_prefix: str = ...
    routes: List[Route] = ...
    middlewares: List[CoroFunc] = ...
    def __init__(self, url_prefix: str) -> None: ...
    def add_route(self, route: Union[Route, WebsocketRoute]) -> Union[Route, WebsocketRoute]: ...
    def remove_route(self, route: Union[Route, WebsocketRoute]) -> Optional[Union[Route, WebsocketRoute]]: ...
    def websocket(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def route(self, path: str, method: str) -> Callable[[CoroFunc], Route]: ...
    def get(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def post(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def put(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def delete(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def patch(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def options(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def head(self, path: str) -> Callable[[CoroFunc], Route]: ...
    def middleware(self, func: CoroFunc) -> CoroFunc: ...
    def __iter__(self) -> Any: ...
