from typing import Any, Dict, Iterable, Tuple, Type, TypeVar, Union, Iterator, List
import inspect

T = TypeVar('T')

class IncompatibleType(Exception):
    field: Field = ...
    data: Dict[str, Any] = ...
    argument: Type[Any] = ...
    def __init__(self, field: Field, argument: Type[Any], data: Dict[str, Any]) -> None: ...

class MissingField(Exception):
    field: Field = ...
    data: Dict[str, Any] = ...
    def __init__(self, field: Field, data: Dict[str, Any]) -> None: ...

class ObjectNotSerializable(Exception):
    obj: Any = ...
    def __init__(self, obj: Any) -> None: ...

class Field:
    name: str = ...
    types: Tuple[Type] = ...
    default: Any = ...
    def __init__(self, name: str, types: Tuple[Type], default: Any) -> None: ...
    def __iter__(self) -> Iterator[Type]: ...

class ModelOptions:
    include_null_fields: bool = ...
    repr: bool = ...
    def __init__(self, *, include_null_fields: bool=..., repr: bool=...) -> None: ...

class ModelMeta(type):
    def __new__(cls: Any, name: str, bases: Tuple[Type[Any]], attrs: Dict[str, Any]) -> Any: ...
    def __iter__(self) -> Iterable[Field]: ...

class Model(metaclass=ModelMeta):
    __fields__: Tuple[Field] = ...
    __options__: ModelOptions = ...
    __parent__: Type[Model] = ...
    __children__: List[Type[Model]] = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def __repr__(self) -> str: ...
    def __iter__(self) -> Iterator[Tuple[Field, Any]]: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def copy(self: T, *, include: Iterable[str]=..., exclude: Iterable[str]=...) -> T: ...
    def json(self, *, include: Iterable[str]=..., exclude: Iterable[str]=...) -> Dict[str, Any]: ...
    def to_dict(self, *, include: Iterable[str]=..., exclude: Iterable[str]=...) -> Dict[str, Any]: ...
    def is_json_serializable(self) -> bool: ...
    @classmethod
    def from_json(cls: Type[T], data: Union[Dict[str, Any], Any]) -> T: ...
    @property
    def fields(self) -> Tuple[Field]: ...
    @property
    def options(self) -> ModelOptions: ...
    @property
    def parent(self) -> Type[Model]: ...
    @property
    def children(self) -> List[Type[Model]]: ...
    @property
    def signature(self) -> inspect.Signature: ...