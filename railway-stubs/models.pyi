from typing import Any, Dict, Tuple, Type, Union

class _Default: ...

class IncompatibleType(Exception):
    field: Field = ...
    data: Type[Any] = ...
    argument: Dict[str, Any] = ...
    def __init__(self, field: Field, argument: Type[Any], data: Dict[str, Any]) -> None: ...

class MissingField(Exception):
    field: Field = ...
    data: Dict[str, Any] = ...
    def __init__(self, field: Field, data: Dict[str, Any]) -> None: ...

class Field:
    name: str = ...
    type: Type[Any] = ...
    default: Any = ...
    def __init__(self, name: str, type: Type[Any], default: Any) -> None: ...

class ModelMeta(type):
    def __new__(cls: Any, name: str, bases: Tuple[Type[Any]], attrs: Dict[str, Any]) -> Any: ...

class Model(metaclass=ModelMeta):
    __fields__: Tuple[Field]
    def __init__(self, **kwargs: Any) -> None: ...
    def json(self) -> Dict[str, Any]: ...
    @classmethod
    def from_json(cls: Any, data: Union[Dict[str, Any], Any]) -> Model: ...
